<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd"
       default-lazy-init="true">
    <description>Spring Configuration</description>
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath:jeesite.properties"/>      <!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
    <util:properties id="APP_PROP" location="classpath:jeesite.properties"
                     local-override="true"/>      <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.thinkgem.jeesite"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>      <!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage"
                  value="com.thinkgem.jeesite.modules.**"/>
        <!--<property name="typeAliasesSuperType" value="com.thinkgem.jeesite.common.persistence.BaseEntity"/>-->
        <property name="mapperLocations"
                  value="classpath*:/com/thinkgem/jeesite/modules/**/mapper/xml/*.xml"/>         <!--<property name="configLocation" value="classpath:/mybatis-config.xml"></property>-->           <!-- 插件配置 -->
        <!--<property name="plugins">-->
        <!--<array>                 &lt;!&ndash; 分页插件配置, 参考文档分页插件部分！！ &ndash;&gt;                 &lt;!&ndash; 如需要开启其他插件，可配置于此 &ndash;&gt;-->
        <!--<bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">-->
        <!--<property name="dialectType" value="mysql"/>-->
        <!--</bean>                 &lt;!&ndash;<bean class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor"/>&ndash;&gt;-->
        <!--</array>-->
        <!--</property>         &lt;!&ndash; MP 全局配置注入 &ndash;&gt;-->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>
    <!--<bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">-->
    <!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
    <!--<constructor-arg name="mapperLocations" value="classpath*:/com/thinkgem/jeesite/modules/**/mapper/xml/*.xml"/>-->
    <!--<constructor-arg name="enabled" value="true"/>-->
    <!--</bean>-->
    <bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector"/>      <!-- 定义 MP 全局策略 -->
    <bean id="globalConfig"
          class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 主键策略配置 -->
        <!-- 可选参数
        AUTO->`0`("数据库ID自增")
        INPUT->`1`(用户输入ID")
        ID_WORKER->`2`("全局唯一ID")
        UUID->`3`("全局唯一ID")
                 -->
        <property name="idType" value="3"/>
        <property name="sqlInjector" ref="logicSqlInjector"/>
        <property name="logicDeleteValue" value="-1"/>
        <property name="logicNotDeleteValue" value="1"/>
        <property name="dbType" value="mysql"/>
        <!-- 全局表为下划线命名设置 true -->
        <property name="dbColumnUnderline" value="true"/>
    </bean>
    <!--#############################################################################################################################-->

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage"
                  value="com.thinkgem.jeesite.modules.**.mapper"/>         <!--<property name="annotationClass" value="com.thinkgem.jeesite.common.persistence.annotation.MyBatisDao"/>-->
    </bean>       <!-- 定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>      <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>     <!-- MyBatis end -->      <!-- 配置 JSR303 Bean Validator 定义 -->
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>      <!-- 缓存配置 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:${ehcache.configFile}"/>
    </bean>      <!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->     <!--<task:executor id="executor" pool-size="10"/>-->     <!--<task:scheduler id="scheduler" pool-size="10"/>-->     <!--<task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>-->      <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">         <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}"/>          <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>          <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>          <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>          <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>          <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn"
                  value="false"/>          <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）         <property name="poolPreparedStatements" value="true" />         <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->          <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>      <!-- 数据源配置, 使用应用服务器的数据库连接池     <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jeesite" />-->      <!-- 数据源配置, 不使用连接池     <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">         <property name="driverClassName" value="${jdbc.driver}" />         <property name="url" value="${jdbc.url}" />         <property name="username" value="${jdbc.username}"/>         <property name="password" value="${jdbc.password}"/>     </bean>-->      <!--<bean class="com.mangofactory.swagger.configuration.SpringSwaggerConfig" />-->
</beans>